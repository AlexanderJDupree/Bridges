
name: Build/Test

on: [push, pull_request, release]

env:
  bridges_app: "build/bin/bridges"
  bridges_test: "build/bin/tests/bridges_tests"
  artifacts: "bin install_manifest.txt CMakeFiles/*.log"

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config: 
        - {
            name: "Windows Latest MSVC",
            os: windows-latest,
            artifact: "windows_msvc.7z",
            build_type: "Release",
            cc: "cl",
            cxx: "cl",
            archiver: "7z a"

          }
        - {
            name: "Windows Latest MinGW",
            os: windows-latest,
            artifact: "windows_mingw.7z",
            build_type: "Release",
            cc: "gcc",
            cxx: "g++",
            archiver: "7z a"
          }
        - {
            name: "Ubuntu Latest GCC",
            os: ubuntu-latest,
            artifact: "ubuntu_gcc.tar",
            build_type: "Release",
            cc: "gcc",
            cxx: "g++",
            archiver: "tar -czvf"
          }
        - {
            name: "MacOS Latest Clang",
            os: macos-latest,
            artifact: "macos_clang.tar",
            build_type: "Release",
            cc: "clang",
            cxx: "clang++",
            archiver: "tar -czvf"
          }

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
        with: 
          submodules: recursive

      - name: Configure
        shell: bash
        run: mkdir build && cd build && cmake -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON -DCMAKE_EXPORT_COMPILE_COMMANDS=ON ..
        
      - name: Build
        working-directory: build
        shell: bash
        run: cmake --build . --config ${{ matrix.config.build_type }} --parallel 6

      - name: Install Binaries
        working-directory: build
        shell: bash
        run: cmake --build . --config ${{ matrix.config.build_Type }} --target install --parallel 6
      
      - name: Run Tests
        shell: bash
        run: ./${{ env.bridges_test }}
      
      - name: Run Server
        shell: bash
        run: |
          ./${{ env.bridges_app }} & 
          BRIDGES_PID=$!
          sleep 1 && curl localhost:8000
          sleep 1 && kill $BRIDGES_PID

      - name: Pack
        if: always()
        working-directory: build
        shell: bash
        run: |
          ${{ matrix.config.archiver }} ../${{ matrix.config.artifact }} ${{ env.artifacts }}
          
      - name: Upload Artifacts
        if: always()
        uses: actions/upload-artifact@v1
        with:
          path: ./${{ matrix.config.artifact }}
          name: ${{ matrix.config.artifact }}

      - name: Upload Release Artifacts
        if: github.event_name == 'release' && (github.event.action == 'published' || github.event.action == 'created')
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./${{ matrix.config.artifact }}
          asset_name: ${{ matrix.config.artifact }}.zip
          asset_content_type: application/zip
